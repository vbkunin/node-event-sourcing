openapi: 3.0.3
info:
  title: Query API
  description: Query API
  version: 1.0.0
servers:
  - url: 'http://localhost:3001'
paths:
  /v1/purchase:
    parameters:
      - in: query
        name: payer
        required: false
        schema:
          type: string
    get:
      operationId: getPurchases
      responses:
        200:
          description: Requested purchases list
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/Purchase'
                  # todo: add pagination
                  # pagination:
                  #   type: object
        default:
          $ref: '#/components/schemas/Error'
  /v1/purchase/{purchaseId}:
    parameters:
      - in: path
        name: purchaseId
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getPurchase
      responses:
        200:
          description: Requested purchase
          content:
            application/json:
              schema:
                type: object
                properties:
                  entry:
                    $ref: '#/components/schemas/Purchase'
        default:
          $ref: '#/components/schemas/Error'
  /v1/debts:
    parameters:
      - in: query
        name: creditor
        required: false
        schema:
          type: string
      - in: query
        name: debtor
        required: false
        schema:
          type: string
      - in: query
        name: accepted
        required: false
        schema:
          type: boolean
    get:
      operationId: getDebts
      responses:
        200:
          description: Requested debts list
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/Debt'
                  # todo: add pagination
                  # pagination:
                  #   type: object
        default:
          $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: johndoe
    Purchase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: Buns with raisins
        date:
          type: string
          format: date-time
        amount:
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 100.5
        payer:
          $ref: '#/components/schemas/User'
    Debt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        purchaseId:
          type: string
          format: uuid
        purchaseTitle:
          type: string
          example: Buns with raisins
        purchaseDate:
          type: string
          format: date-time
        creditor:
          $ref: '#/components/schemas/User'
        debtor:
          $ref: '#/components/schemas/User'
        amount:
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 33.5
        remains:
          type: number
          minimum: 0
          example: 0
        accepted:
          type: boolean
          example: true
    Error:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            type: object
      required: [ message ]
  responses:
    400:
      description: Bad request
    500:
      description: Internal error
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

